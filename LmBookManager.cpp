//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LmBookManager.cpp
//  @ Date : 2009-01-11
//  @ Author : 
//
//


#include "LmBookManager.h"
LmBookManager::LmBookManager()
{
	m_pListBook = NULL;
}

LmBookManager::~LmBookManager()
{
	UnregisterAllBook();
}
bool LmBookManager::RegisterBook() {
	LmContent* pContentBook = new LmContent;
	if(pContentBook == NULL)
		return false;

	cout << "------------------------------" << endl;
	cout << "         책 등록 메뉴         " << endl;
	cout << "------------------------------" << endl;
	cout << "책 이름 : ";
	cin >> pContentBook->m_strTitle;

	cout << "책 출판사 : ";
	cin >> pContentBook->m_strPublisher;

	cout << "책 저자 : ";
	cin >> pContentBook->m_strAuthor;

	if(m_pListBook == NULL)
		m_pListBook = pContentBook;
	else
		m_pListBook->m_pNext = pContentBook;

	return true;
}

bool LmBookManager::UnregisterBook() {
	string strBookTitle;
	LmContent* pCurr = m_pListBook;

	cout << "------------------------------" << endl;
	cout << "         책 삭제 메뉴         " << endl;
	cout << "------------------------------" << endl;
	cout << "삭제할 책 이름 : ";
	cin >> strBookTitle;

	while(pCurr != NULL)
	{
		if(pCurr->m_strTitle == strBookTitle)
		{
			// 이전 포인터를 다음 포인터에 연결하고 
			// 현재 포인터를 삭제한다.
			if(pCurr->m_pPrev != NULL)
				pCurr->m_pPrev->m_pNext = pCurr->m_pNext;

			// 이전 포인터가 NULL이면 헤더 포인터다.
			else 
				this->m_pListBook = pCurr->m_pNext;

			delete pCurr;
			
			return true;
		}

		pCurr = pCurr->m_pNext;
	}

	return false;
}

LmContent* LmBookManager::GetBook(string _bookName) {

	LmContent* pCurr = m_pListBook;

	while(pCurr != NULL)
	{
		if(pCurr->m_strTitle == _bookName)
			return pCurr;

		pCurr = pCurr->m_pNext;
	}

	return NULL;
}

bool LmBookManager::UnregisterAllBook(){
	LmContent* pPrev = NULL;
	LmContent* pCurr = m_pListBook;

	while(pCurr != NULL)
	{
		pPrev = pCurr;
		pCurr = pCurr->m_pNext;
		delete pPrev;
	}

	return true;
}
